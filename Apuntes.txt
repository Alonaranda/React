Para empezar necesitamos tener instalado:
https://gist.github.com/Klerith/4a4abfd88a88b2d1f16efd95fea41362
Chrome
React Developer Tools
Redux Devtools 
Visual Studio Code 
Postman 
Mongo Compass 
Git 
Node 

Documentación REACT: https://create-react-app.dev/

¿Qué es React?
-Es una librería que nos permite crear aplicaciones
-Todo tipo de magnitud 
-Declarativa
-Eficiente
-Predecible 
-Componentes 
-Serve-side con Node 
-Aplicaciones moviles con react native

Babel:
JSX = JS + XML

Al ser una librería se debe importar REACT: https://gist.github.com/Klerith/b0111f52ba16451d095f38d4c995605b

    <!-- Cargat React -->
    <script crossorigin src="https://unpkg.com/react@16/umd/react.production.min.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@16/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>





Crear nuevo proyecto React: npx create-react-app nameApp
Empezar servidor: npm start 





¿Qué es un componente en React?
-Pequeña pieza de código encapsulado re-utilizable que puede tener estado o no, 
que realiza una determinada acción
TwiterApp > Router > Screen/Pagina > Menu > MenuItem
Estado: Como se encuentra la información en un determinado tiempo 




//Estructura de directorios
src --> Aqui tenemos lo necesario para que nuestra App funcione,
    APP.js --> Funcion de nuestra app
    APP.test.js --> Realiza pruebas
    index.css --> Estilos globales 
    index.js --> Punto inicial de nuestra app 
    logo.svg --> Imagen vertorizada 
    serviceWorker.js --> PWA, cache 
    setupTests.js --> Lo primero que se levanta para las pruebas 
node_modules --> Librerías y paquetes que hacen que funcione mi aplicación en prod 
public --> Mi aplicacion, punto inicial del index 
gitignore --> Selecciona que carpetas me interesan 
package.json --> versiones y dependencias de mi aplicacion, solo agregamos scripts
README --> Descripcion de la aplicacion
yarn.lock --> Define las versiones y paquetes utilizados

//https://developers.google.com/web/ilt/pwa
//https://create-react-app.dev/docs/available-scripts/


//Comunicacion entre componentes 
Se utiliza props donde se define en Padre, y con props. se accede a los valores.
Una buena practica es hacer una desestructuracion de elementos {}
Se pueden definir así: 

import PropTypes from 'prop-types';
impt

PrimeraApp.propTypes = {
    despedida: PropTypes.string.isRequired,
}

PrimeraApp.defaultProps = {
    subtitulo: 'Soy un subtitulo'
}

//Functional component rafc

//Eventos en React 
https://es.reactjs.org/docs/events.html

<button onClick={handleAdd}>+1</button>//Se pasa el evento e como primer argumento

    const handleAdd = (e) => {
        console.log(e);
    }


//Hook 
Es una funcion y retorna un arreglo [argumento, funcion] 
[ argumento, ()=> {}] con desestructuracion podemos obtener los dos
Un use es un Hook
const useState = (valor) => {
    return [valor, () =>{console.log('Hola')}];
} 
const [nombre, setNombre] = useState('Goku);

La funcion sirve para modificar la variable, es su set 


//CustomHooks
Una forma de extraer logica de un componente para reutilizar 


//Despliegue a Github Pages 
https://www.npmjs.com/package/http-server
npm run build 

Empezar con git un proyecto final 

git init 
git add .
git commit -m "First commit"
//Se cambia build por docs para desplegar mi aplicacion en git 
Ir a github ir a la carpeta/setting/Github Pages/Seleccionar ruta