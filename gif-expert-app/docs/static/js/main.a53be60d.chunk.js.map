{"version":3,"sources":["componentes/AddCategory.js","helpers/getGifs.js","componentes/GifGridItem.js","componentes/GifGrid.js","hooks/useFetchGifs.js","componentes/GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setValue","onSubmit","e","preventDefault","trim","length","cate","type","value","onChange","target","placeholder","getGifs","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEbC,mBAAS,IAFI,mBAErCC,EAFqC,KAEzBC,EAFyB,KAiB5C,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAS,MAKb,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAlBY,SAACP,GACrBF,EAASE,EAAEQ,OAAOF,QAkBVG,YAAY,sB,+BCzBbC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UAAUH,GAD3C,+DAEGI,MAAMF,GAFT,cAEfG,EAFe,gBAGEA,EAAUC,OAHZ,uBAGbC,EAHa,EAGbA,KAGFC,EAAOD,EAAKE,KAAI,SAAAC,GACpB,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAVhB,kBAedM,GAfc,4CAAH,sDCCTO,EAAc,SAAC,GAAiB,IAAhBH,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAG/B,OACI,sBAAKc,UAAU,2DAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCHHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECAd,SAACA,GAAc,IAAD,EACXf,mBAAS,CAC/BsB,KAAM,GACNa,SAAS,IAHwB,mBAC9BC,EAD8B,KACvBC,EADuB,KAarC,OAPAC,qBAAU,WACNxB,EAAQC,GAAUwB,MAAK,SAAAC,GAAQH,EAAS,CACpCf,KAAKkB,EACLL,SAAS,SAEf,CAACpB,IAEIqB,EDHwBK,CAAa1B,GAAhCa,EAVyB,EAU9BN,KAAaa,EAViB,EAUjBA,QAatB,OACE,qCACE,6BAAKpB,IACJoB,GAAW,2CACZ,qBAAKJ,UAAU,4BAAf,SACGH,EAAOJ,KAAI,SAAAC,GAAG,OACb,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aE9BnBgB,EAAe,WAAM,MAEM1C,mBAAS,CAAC,aAFhB,mBAEvB2C,EAFuB,KAEX5C,EAFW,KAU9B,OACI,qCACI,8CAEA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEQ4C,EAAWnB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEAA,SAAUA,GADLA,YCnB7B6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.a53be60d.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setCategories}) => {\n\n    const [inputValue, setValue] = useState('');\n\n    const handleInputText = (e) => {\n        setValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if(inputValue.trim().length > 2){\n            setCategories(cate => [inputValue, ...cate, ]);\n            setValue('');\n        }\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputText}\n                placeholder='Buscado tu Gif'\n            ></input>\n        </form>\n        \n    )\n}\n\n//PropTypes\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","  //Funcion que se comunica con API\n  export const getGifs = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=FLetpOxK5FfMLtWxKhdqokjdyB3URp7m`;\n    const respuesta = await fetch(url);\n    const { data } = await respuesta.json();\n    //console.log(data);\n\n    const gifs = data.map(img => {\n      return {\n        id: img.id,\n        title: img.title,\n        url: img.images.downsized_medium.url\n      };\n    });\n    //console.log(gifs);\n    //setImages(gifs);\n    return gifs;\n  };","import React from 'react'\n\nexport const GifGridItem = ({title,url}) => {\n\n    //console.log(id, title, url);\n    return (\n        <div className=\"card animate__animated animate__bounce animate__delay-1s\">\n            <img src={url} alt={title}></img>\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from \"react\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\nimport { GifGridItem } from \"./GifGridItem\";\n//import { getGifs } from \"../helpers/getGifs\";\n\nexport const GifGrid = ({ category }) => {\n  //Al ejecutar una funcion dentro de una api, se vuelve un ciclo infinito\n  //UseEffect hace que no hagamos ciclo infinito\n  //Ejecuta cierto codigo de manera condicional\n  //El arreglo vacio, indica que solo se ejecuta una vez\n\n  \n    \n  //const [images, setImages] = useState([]);\n    //Usamos helpers\n    const {data:images, loading} = useFetchGifs(category);\n    //console.log(data, loading);\n\n    /*\n    useEffect(() => {\n        getGifs(category)\n            .then(imgs =>{\n                setImages(imgs);\n        })\n    }, [category]);//Si la category cambia, se vuelve a ejecutar\n    */\n  \n\n  return (\n    <>\n      <h3>{category}</h3>\n      {loading && <p>Loading...</p>}\n      <div className=\"card-grid animate__fadeIn\">\n        {images.map(img => (\n          <GifGridItem key={img.id} {...img} />\n        ))}\n      </div>\n    </>\n  );\n};\n","import {useState,useEffect} from 'react';\nimport {getGifs} from '../helpers/getGifs';\n\n//Son como functional component\n\nexport const useFetchGifs= (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(()=>{\n        getGifs(category).then(imgs =>{setState({\n            data:imgs,\n            loading: false\n        })})\n    },[category])\n\n    return state;\n}","import React, {useState} from 'react'\nimport { AddCategory } from './AddCategory';\nimport { GifGrid } from './GifGrid';\n\nexport const GifExpertApp = () => {\n    //const categories = ['Inuyasha', 'Naruto', 'Samurai X'];\n    const [categories, setCategories] = useState(['Inuyasha']);\n    /*\n    const handleAdd = () => {\n        //setCategories([...categories, 'DeathNote']);\n        setCategories( cate => [...cate, 'DeathNote']);\n    }*/\n\n    //Para pasar datos en el <AddCategory/> agregamos que vamos a utilizar\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n             \n            <AddCategory setCategories={setCategories}/>\n            <hr/>\n            <ol>\n                {\n                    categories.map(category => \n                        <GifGrid \n                        key={category}\n                        category={category}\n                        />\n                    //<li key={category}>{category}</li>\n                    ) //El key no debe ser el indice, casi siempre es el id de la BD\n                }\n            </ol>\n        </>\n    )\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {GifExpertApp} from './componentes/GifExpertApp';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}